<?php

require "BerlinClock.php";
use PHPUnit\Framework\TestCase;
define("hours",date("H"));
define("minutes",date("i"));
define("secondes",date("s"));

class BerlinClockTest extends TestCase
{
    private $berlinClock;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->berlinClock = new BerlinClock();
    }

    public function test_convert_givenNowTime_shouldReturnSameAsNow(){
        $actual = $this->berlinClock->now();

        $this->assertEquals($this->berlinClock->berlin_clock(hours,minutes,secondes),$actual);
    }

    public function test_convert_givenEvenSecondes_souldReturnILight(){
        $actual = $this->getSecondes('OO');

        $this->assertEquals("I",$actual);
    }

    public function test_convert_givenOddSecondes_shouldReturnOLight(){
        $actual = $this->getSecondes('01');

        $this->assertEquals("O",$actual);
    }

    public function test_convert_given00Minutes_shouldReturn00Light(){
        $actual = $this->getMinutes('00');

        $this->assertEquals("OOOO",$actual);
    }

    public function test_convert_given01Minutes_shouldReturn01Light(){
        $actual = $this->getMinutes('01');

        $this->assertEquals("OOOI", $actual);
    }

    public function test_convert_given02Minutes_shouldReturn02Light(){
        $actual = $this->getMinutes('02');

        $this->assertEquals("OOII", $actual);
    }

    public function test_convert_given03Minutes_shouldReturn03Light(){
        $actual = $this->getMinutes('03');

        $this->assertEquals("OIII", $actual);
    }

    public function test_convert_given04Minutes_shouldReturn04Light(){
        $actual = $this->getMinutes('04');

        $this->assertEquals("IIII", $actual);
    }

    public function test_convert_given05Minutes_shouldReturn01_SecondLineLight(){
        $actual = $this->getMinutes_per_05('05');

        $this->assertEquals('OOOOOOOOOOI',$actual);
    }

    public function test_convert_given10Minutes_shouldReturn02_SecondLineLight(){
        $actual = $this->getMinutes_per_05('10');

        $this->assertEquals('OOOOOOOOOII',$actual);
    }

    public function test_convert_given15Minutes_shouldReturn03_SecondLineLight(){
        $actual = $this->getMinutes_per_05('15');

        $this->assertEquals('OOOOOOOOIII',$actual);
    }

    public function test_convert_given20Minutes_shouldReturn04_SecondLineLight(){
        $actual = $this->getMinutes_per_05('20');

        $this->assertEquals('OOOOOOOIIII',$actual);
    }

    public function test_convert_given25Minutes_shouldReturn05_SecondLineLight(){
        $actual = $this->getMinutes_per_05('25');

        $this->assertEquals('OOOOOOIIIII',$actual);
    }

    public function test_convert_given30Minutes_shouldReturn06_SecondLineLight(){
        $actual = $this->getMinutes_per_05('30');

        $this->assertEquals('OOOOOIIIIII',$actual);
    }

    public function test_convert_given35Minutes_shouldReturn07_SecondLineLight(){
        $actual = $this->getMinutes_per_05('35');

        $this->assertEquals('OOOOIIIIIII',$actual);
    }

    public function test_convert_given40Minutes_shouldReturn08_SecondLineLight(){
        $actual = $this->getMinutes_per_05('40');

        $this->assertEquals('OOOIIIIIIII',$actual);
    }

    public function test_convert_given45Minutes_shouldReturn09_SecondLineLight(){
        $actual = $this->getMinutes_per_05('45');

        $this->assertEquals('OOIIIIIIIII',$actual);
    }

    public function test_convert_given50Minutes_shouldReturn10_SecondLineLight(){
        $actual = $this->getMinutes_per_05('50');

        $this->assertEquals('OIIIIIIIIII',$actual);
    }

    public function test_convert_given55Minutes_shouldReturn11_SecondLineLight(){
        $actual = $this->getMinutes_per_05('55');

        $this->assertEquals('IIIIIIIIIII',$actual);
    }

    public function test_convert_given00Hours_shouldReturn00_ThirdLineLight(){
        $actual = $this->getHours('00');

        $this->assertEquals('OOOO',$actual);
    }

    public function test_convert_given01Hours_shouldReturn01_ThirdLineLight(){
        $actual = $this->getHours('01');

        $this->assertEquals('OOOI',$actual);
    }

    public function test_convert_given02Hours_shouldReturn02_ThirdLineLight(){
        $actual = $this->getHours('02');

        $this->assertEquals('OOII',$actual);
    }

    public function test_convert_given03Hours_shouldReturn03_ThirdLineLight(){
        $actual = $this->getHours('03');

        $this->assertEquals('OIII',$actual);
    }

    public function test_convert_given04Hours_shouldReturn04_ThirdLineLight(){
        $actual = $this->getHours('04');

        $this->assertEquals('IIII',$actual);
    }

    public function test_convert_given00Hours_shouldReturn00_FourthLineLight(){
        $actual = $this->berlinClock->hours_per_05('00');

        $this->assertEquals('OOOO',$actual);
    }

    public function test_convert_given05Hours_shouldReturn01_FourthLineLight(){
        $actual = $this->berlinClock->hours_per_05('05');

        $this->assertEquals('OOOI',$actual);
    }

    public function test_convert_given10Hours_shouldReturn02_FourthLineLight(){
        $actual = $this->berlinClock->hours_per_05('10');

        $this->assertEquals('OOII',$actual);
    }

    public function test_convert_given15Hours_shouldReturn03_FourthLineLight(){
        $actual = $this->berlinClock->hours_per_05('15');

        $this->assertEquals('OIII',$actual);
    }

    public function test_convert_given20Hours_shouldReturn04_FourthLineLight(){
        $actual = $this->berlinClock->hours_per_05('20');

        $this->assertEquals('IIII',$actual);
    }

    public function test_convert_00Hours_00Minutes_00Secondes_shouldReturnI00000000000000000000000(){
        $actual = $this->berlinClock->berlin_clock('00','00','00');

        $this->assertEquals('IOOOOOOOOOOOOOOOOOOOOOOO',$actual);
    }

    public function test_convert_23Hours_59Minutes_59Secondes_shouldReturn0IIIIIIIIIIIIIIIIIIIIIII(){
        $actual = $this->berlinClock->berlin_clock('23','59','59');

        $this->assertEquals('OIIIIOIIIIIIIIIIIIIIIIII',$actual);
    }

    private function getSecondes(String $string): string
    {
        return $this->berlinClock->secondes($string);
    }

    private function getMinutes(String $string): string
    {
        return $this->berlinClock->minutes($string);
    }

    private function getMinutes_per_05(String $string): string
    {
        return $this->berlinClock->minutes_per_05($string);
    }

    private function getHours(String $string): string
    {
        return $this->berlinClock->hours($string);
    }

}
